{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.10.0",
        "notifications" : [ {
          "id" : "java/diagnostics/extraction-errors",
          "name" : "java/diagnostics/extraction-errors",
          "shortDescription" : {
            "text" : "Extraction errors"
          },
          "fullDescription" : {
            "text" : "A list of extraction errors for files in the source code directory."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "description" : "A list of extraction errors for files in the source code directory.",
            "id" : "java/diagnostics/extraction-errors",
            "kind" : "diagnostic",
            "name" : "Extraction errors"
          }
        }, {
          "id" : "java/diagnostics/extraction-warnings",
          "name" : "java/diagnostics/extraction-warnings",
          "shortDescription" : {
            "text" : "Extraction warnings"
          },
          "fullDescription" : {
            "text" : "A list of extraction warnings for files in the source code directory."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "description" : "A list of extraction warnings for files in the source code directory.",
            "id" : "java/diagnostics/extraction-warnings",
            "kind" : "diagnostic",
            "name" : "Extraction warnings"
          }
        }, {
          "id" : "java/diagnostics/successfully-extracted-files",
          "name" : "java/diagnostics/successfully-extracted-files",
          "shortDescription" : {
            "text" : "Successfully extracted files"
          },
          "fullDescription" : {
            "text" : "A list of all files in the source code directory that were extracted without encountering an error in the file."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "description" : "A list of all files in the source code directory that\n              were extracted without encountering an error in the file.",
            "id" : "java/diagnostics/successfully-extracted-files",
            "kind" : "diagnostic",
            "name" : "Successfully extracted files"
          }
        } ],
        "rules" : [ {
          "id" : "java/implicit-cast-in-compound-assignment",
          "name" : "java/implicit-cast-in-compound-assignment",
          "shortDescription" : {
            "text" : "Implicit narrowing conversion in compound assignment"
          },
          "fullDescription" : {
            "text" : "Compound assignment statements (for example 'intvar += longvar') that implicitly cast a value of a wider type to a narrower type may result in information loss and numeric errors such as overflows."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "security", "external/cwe/cwe-190", "external/cwe/cwe-192", "external/cwe/cwe-197", "external/cwe/cwe-681" ],
            "description" : "Compound assignment statements (for example 'intvar += longvar') that implicitly\n              cast a value of a wider type to a narrower type may result in information loss and\n              numeric errors such as overflows.",
            "id" : "java/implicit-cast-in-compound-assignment",
            "kind" : "problem",
            "name" : "Implicit narrowing conversion in compound assignment",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "security-severity" : "8.1"
          }
        }, {
          "id" : "java/path-injection",
          "name" : "java/path-injection",
          "shortDescription" : {
            "text" : "Uncontrolled data used in path expression"
          },
          "fullDescription" : {
            "text" : "Accessing paths influenced by users can allow an attacker to access unexpected resources."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-022", "external/cwe/cwe-023", "external/cwe/cwe-036", "external/cwe/cwe-073" ],
            "description" : "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
            "id" : "java/path-injection",
            "kind" : "path-problem",
            "name" : "Uncontrolled data used in path expression",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/zipslip",
          "name" : "java/zipslip",
          "shortDescription" : {
            "text" : "Arbitrary file write during archive extraction (\"Zip Slip\")"
          },
          "fullDescription" : {
            "text" : "Extracting files from a malicious archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-022" ],
            "description" : "Extracting files from a malicious archive without validating that the\n              destination file path is within the destination directory can cause files outside\n              the destination directory to be overwritten.",
            "id" : "java/zipslip",
            "kind" : "path-problem",
            "name" : "Arbitrary file write during archive extraction (\"Zip Slip\")",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/jndi-injection",
          "name" : "java/jndi-injection",
          "shortDescription" : {
            "text" : "JNDI lookup with user-controlled name"
          },
          "fullDescription" : {
            "text" : "Performing a JNDI lookup with a user-controlled name can lead to the download of an untrusted object and to execution of arbitrary code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-074" ],
            "description" : "Performing a JNDI lookup with a user-controlled name can lead to the download of an untrusted\n              object and to execution of arbitrary code.",
            "id" : "java/jndi-injection",
            "kind" : "path-problem",
            "name" : "JNDI lookup with user-controlled name",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/xslt-injection",
          "name" : "java/xslt-injection",
          "shortDescription" : {
            "text" : "XSLT transformation with user-controlled stylesheet"
          },
          "fullDescription" : {
            "text" : "Performing an XSLT transformation with user-controlled stylesheets can lead to information disclosure or execution of arbitrary code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-074" ],
            "description" : "Performing an XSLT transformation with user-controlled stylesheets can lead to\n              information disclosure or execution of arbitrary code.",
            "id" : "java/xslt-injection",
            "kind" : "path-problem",
            "name" : "XSLT transformation with user-controlled stylesheet",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/command-line-injection",
          "name" : "java/command-line-injection",
          "shortDescription" : {
            "text" : "Uncontrolled command line"
          },
          "fullDescription" : {
            "text" : "Using externally controlled strings in a command line is vulnerable to malicious changes in the strings."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-078", "external/cwe/cwe-088" ],
            "description" : "Using externally controlled strings in a command line is vulnerable to malicious\n              changes in the strings.",
            "id" : "java/command-line-injection",
            "kind" : "path-problem",
            "name" : "Uncontrolled command line",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/concatenated-command-line",
          "name" : "java/concatenated-command-line",
          "shortDescription" : {
            "text" : "Building a command line with string concatenation"
          },
          "fullDescription" : {
            "text" : "Using concatenated strings in a command line is vulnerable to malicious insertion of special characters in the strings."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-078", "external/cwe/cwe-088" ],
            "description" : "Using concatenated strings in a command line is vulnerable to malicious\n              insertion of special characters in the strings.",
            "id" : "java/concatenated-command-line",
            "kind" : "problem",
            "name" : "Building a command line with string concatenation",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/xss",
          "name" : "java/xss",
          "shortDescription" : {
            "text" : "Cross-site scripting"
          },
          "fullDescription" : {
            "text" : "Writing user input directly to a web page allows for a cross-site scripting vulnerability."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-079" ],
            "description" : "Writing user input directly to a web page\n              allows for a cross-site scripting vulnerability.",
            "id" : "java/xss",
            "kind" : "path-problem",
            "name" : "Cross-site scripting",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "6.1"
          }
        }, {
          "id" : "java/sql-injection",
          "name" : "java/sql-injection",
          "shortDescription" : {
            "text" : "Query built from user-controlled sources"
          },
          "fullDescription" : {
            "text" : "Building a SQL or Java Persistence query from user-controlled sources is vulnerable to insertion of malicious code by the user."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-089", "external/cwe/cwe-564" ],
            "description" : "Building a SQL or Java Persistence query from user-controlled sources is vulnerable to insertion of\n              malicious code by the user.",
            "id" : "java/sql-injection",
            "kind" : "path-problem",
            "name" : "Query built from user-controlled sources",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "8.8"
          }
        }, {
          "id" : "java/ldap-injection",
          "name" : "java/ldap-injection",
          "shortDescription" : {
            "text" : "LDAP query built from user-controlled sources"
          },
          "fullDescription" : {
            "text" : "Building an LDAP query from user-controlled sources is vulnerable to insertion of malicious LDAP code by the user."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-090" ],
            "description" : "Building an LDAP query from user-controlled sources is vulnerable to insertion of\n              malicious LDAP code by the user.",
            "id" : "java/ldap-injection",
            "kind" : "path-problem",
            "name" : "LDAP query built from user-controlled sources",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/groovy-injection",
          "name" : "java/groovy-injection",
          "shortDescription" : {
            "text" : "Groovy Language injection"
          },
          "fullDescription" : {
            "text" : "Evaluation of a user-controlled Groovy script may lead to arbitrary code execution."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-094" ],
            "description" : "Evaluation of a user-controlled Groovy script\n              may lead to arbitrary code execution.",
            "id" : "java/groovy-injection",
            "kind" : "path-problem",
            "name" : "Groovy Language injection",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/insecure-bean-validation",
          "name" : "java/insecure-bean-validation",
          "shortDescription" : {
            "text" : "Insecure Bean Validation"
          },
          "fullDescription" : {
            "text" : "User-controlled data may be evaluated as a Java EL expression, leading to arbitrary code execution."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-094" ],
            "description" : "User-controlled data may be evaluated as a Java EL expression, leading to arbitrary code execution.",
            "id" : "java/insecure-bean-validation",
            "kind" : "path-problem",
            "name" : "Insecure Bean Validation",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/jexl-expression-injection",
          "name" : "java/jexl-expression-injection",
          "shortDescription" : {
            "text" : "Expression language injection (JEXL)"
          },
          "fullDescription" : {
            "text" : "Evaluation of a user-controlled JEXL expression may lead to arbitrary code execution."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-094" ],
            "description" : "Evaluation of a user-controlled JEXL expression\n              may lead to arbitrary code execution.",
            "id" : "java/jexl-expression-injection",
            "kind" : "path-problem",
            "name" : "Expression language injection (JEXL)",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/mvel-expression-injection",
          "name" : "java/mvel-expression-injection",
          "shortDescription" : {
            "text" : "Expression language injection (MVEL)"
          },
          "fullDescription" : {
            "text" : "Evaluation of a user-controlled MVEL expression may lead to remote code execution."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-094" ],
            "description" : "Evaluation of a user-controlled MVEL expression\n              may lead to remote code execution.",
            "id" : "java/mvel-expression-injection",
            "kind" : "path-problem",
            "name" : "Expression language injection (MVEL)",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/spel-expression-injection",
          "name" : "java/spel-expression-injection",
          "shortDescription" : {
            "text" : "Expression language injection (Spring)"
          },
          "fullDescription" : {
            "text" : "Evaluation of a user-controlled Spring Expression Language (SpEL) expression may lead to remote code execution."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-094" ],
            "description" : "Evaluation of a user-controlled Spring Expression Language (SpEL) expression\n              may lead to remote code execution.",
            "id" : "java/spel-expression-injection",
            "kind" : "path-problem",
            "name" : "Expression language injection (Spring)",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/maven/dependency-upon-bintray",
          "name" : "java/maven/dependency-upon-bintray",
          "shortDescription" : {
            "text" : "Depending upon JCenter/Bintray as an artifact repository"
          },
          "fullDescription" : {
            "text" : "Using a deprecated artifact repository may eventually give attackers access for a supply chain attack."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-1104" ],
            "description" : "Using a deprecated artifact repository may eventually give attackers access for a supply chain attack.",
            "id" : "java/maven/dependency-upon-bintray",
            "kind" : "problem",
            "name" : "Depending upon JCenter/Bintray as an artifact repository",
            "precision" : "very-high",
            "problem.severity" : "error",
            "security-severity" : "6.5"
          }
        }, {
          "id" : "java/netty-http-request-or-response-splitting",
          "name" : "java/netty-http-request-or-response-splitting",
          "shortDescription" : {
            "text" : "Disabled Netty HTTP header validation"
          },
          "fullDescription" : {
            "text" : "Disabling HTTP header validation makes code vulnerable to attack by header splitting if user input is written directly to an HTTP header."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-93", "external/cwe/cwe-113" ],
            "description" : "Disabling HTTP header validation makes code vulnerable to\n              attack by header splitting if user input is written directly to\n              an HTTP header.",
            "id" : "java/netty-http-request-or-response-splitting",
            "kind" : "problem",
            "name" : "Disabled Netty HTTP header validation",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "6.1"
          }
        }, {
          "id" : "java/http-response-splitting",
          "name" : "java/http-response-splitting",
          "shortDescription" : {
            "text" : "HTTP response splitting"
          },
          "fullDescription" : {
            "text" : "Writing user input directly to an HTTP header makes code vulnerable to attack by header splitting."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-113" ],
            "description" : "Writing user input directly to an HTTP header\n              makes code vulnerable to attack by header splitting.",
            "id" : "java/http-response-splitting",
            "kind" : "path-problem",
            "name" : "HTTP response splitting",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "6.1"
          }
        }, {
          "id" : "java/tainted-format-string",
          "name" : "java/tainted-format-string",
          "shortDescription" : {
            "text" : "Use of externally-controlled format string"
          },
          "fullDescription" : {
            "text" : "Using external input in format strings can lead to exceptions or information leaks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-134" ],
            "description" : "Using external input in format strings can lead to exceptions or information leaks.",
            "id" : "java/tainted-format-string",
            "kind" : "path-problem",
            "name" : "Use of externally-controlled format string",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.3"
          }
        }, {
          "id" : "java/stack-trace-exposure",
          "name" : "java/stack-trace-exposure",
          "shortDescription" : {
            "text" : "Information exposure through a stack trace"
          },
          "fullDescription" : {
            "text" : "Information from a stack trace propagates to an external user. Stack traces can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-209", "external/cwe/cwe-497" ],
            "description" : "Information from a stack trace propagates to an external user.\n              Stack traces can unintentionally reveal implementation details\n              that are useful to an attacker for developing a subsequent exploit.",
            "id" : "java/stack-trace-exposure",
            "kind" : "problem",
            "name" : "Information exposure through a stack trace",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "5.4"
          }
        }, {
          "id" : "java/android/intent-uri-permission-manipulation",
          "name" : "java/android/intent-uri-permission-manipulation",
          "shortDescription" : {
            "text" : "Intent URI permission manipulation"
          },
          "fullDescription" : {
            "text" : "Returning an externally provided Intent via 'setResult' may allow a malicious application to access arbitrary content providers of the vulnerable application."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-266", "external/cwe/cwe-926" ],
            "description" : "Returning an externally provided Intent via 'setResult' may allow a malicious\n              application to access arbitrary content providers of the vulnerable application.",
            "id" : "java/android/intent-uri-permission-manipulation",
            "kind" : "path-problem",
            "name" : "Intent URI permission manipulation",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.8"
          }
        }, {
          "id" : "java/insecure-trustmanager",
          "name" : "java/insecure-trustmanager",
          "shortDescription" : {
            "text" : "`TrustManager` that accepts all certificates"
          },
          "fullDescription" : {
            "text" : "Trusting all certificates allows an attacker to perform a machine-in-the-middle attack."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-295" ],
            "description" : "Trusting all certificates allows an attacker to perform a machine-in-the-middle attack.",
            "id" : "java/insecure-trustmanager",
            "kind" : "path-problem",
            "name" : "`TrustManager` that accepts all certificates",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/unsafe-hostname-verification",
          "name" : "java/unsafe-hostname-verification",
          "shortDescription" : {
            "text" : "Unsafe hostname verification"
          },
          "fullDescription" : {
            "text" : "Marking a certificate as valid for a host without checking the certificate hostname allows an attacker to perform a machine-in-the-middle attack."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-297" ],
            "description" : "Marking a certificate as valid for a host without checking the certificate hostname allows an attacker to perform a machine-in-the-middle attack.",
            "id" : "java/unsafe-hostname-verification",
            "kind" : "path-problem",
            "name" : "Unsafe hostname verification",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "5.9"
          }
        }, {
          "id" : "java/cleartext-storage-in-cookie",
          "name" : "java/cleartext-storage-in-cookie",
          "shortDescription" : {
            "text" : "Cleartext storage of sensitive information in cookie"
          },
          "fullDescription" : {
            "text" : "Storing sensitive information in cleartext can expose it to an attacker."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-315" ],
            "description" : "Storing sensitive information in cleartext can expose it to an attacker.",
            "id" : "java/cleartext-storage-in-cookie",
            "kind" : "problem",
            "name" : "Cleartext storage of sensitive information in cookie",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "5.0"
          }
        }, {
          "id" : "java/weak-cryptographic-algorithm",
          "name" : "java/weak-cryptographic-algorithm",
          "shortDescription" : {
            "text" : "Use of a broken or risky cryptographic algorithm"
          },
          "fullDescription" : {
            "text" : "Using broken or weak cryptographic algorithms can allow an attacker to compromise security."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-327", "external/cwe/cwe-328" ],
            "description" : "Using broken or weak cryptographic algorithms can allow an attacker to compromise security.",
            "id" : "java/weak-cryptographic-algorithm",
            "kind" : "path-problem",
            "name" : "Use of a broken or risky cryptographic algorithm",
            "precision" : "high",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/predictable-seed",
          "name" : "java/predictable-seed",
          "shortDescription" : {
            "text" : "Use of a predictable seed in a secure random number generator"
          },
          "fullDescription" : {
            "text" : "Using a predictable seed in a pseudo-random number generator can lead to predictability of the numbers generated by it."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-335", "external/cwe/cwe-337" ],
            "description" : "Using a predictable seed in a pseudo-random number generator can lead to predictability of the numbers generated by it.",
            "id" : "java/predictable-seed",
            "kind" : "problem",
            "name" : "Use of a predictable seed in a secure random number generator",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/jhipster-prng",
          "name" : "java/jhipster-prng",
          "shortDescription" : {
            "text" : "Detect JHipster Generator Vulnerability CVE-2019-16303"
          },
          "fullDescription" : {
            "text" : "Using a vulnerable version of JHipster to generate random numbers makes it easier for attackers to take over accounts."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-338" ],
            "description" : "Using a vulnerable version of JHipster to generate random numbers makes it easier for attackers to take over accounts.",
            "id" : "java/jhipster-prng",
            "kind" : "problem",
            "name" : "Detect JHipster Generator Vulnerability CVE-2019-16303",
            "precision" : "very-high",
            "problem.severity" : "error",
            "security-severity" : "7.8"
          }
        }, {
          "id" : "java/missing-jwt-signature-check",
          "name" : "java/missing-jwt-signature-check",
          "shortDescription" : {
            "text" : "Missing JWT signature check"
          },
          "fullDescription" : {
            "text" : "Failing to check the Json Web Token (JWT) signature may allow an attacker to forge their own tokens."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-347" ],
            "description" : "Failing to check the Json Web Token (JWT) signature may allow an attacker to forge their own tokens.",
            "id" : "java/missing-jwt-signature-check",
            "kind" : "path-problem",
            "name" : "Missing JWT signature check",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.8"
          }
        }, {
          "id" : "java/spring-disabled-csrf-protection",
          "name" : "java/spring-disabled-csrf-protection",
          "shortDescription" : {
            "text" : "Disabled Spring CSRF protection"
          },
          "fullDescription" : {
            "text" : "Disabling CSRF protection makes the application vulnerable to a Cross-Site Request Forgery (CSRF) attack."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-352" ],
            "description" : "Disabling CSRF protection makes the application vulnerable to\n              a Cross-Site Request Forgery (CSRF) attack.",
            "id" : "java/spring-disabled-csrf-protection",
            "kind" : "problem",
            "name" : "Disabled Spring CSRF protection",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "8.8"
          }
        }, {
          "id" : "java/android/fragment-injection",
          "name" : "java/android/fragment-injection",
          "shortDescription" : {
            "text" : "Android fragment injection"
          },
          "fullDescription" : {
            "text" : "Instantiating an Android fragment from a user-provided value may allow a malicious application to bypass access controls, exposing the application to unintended effects."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-470" ],
            "description" : "Instantiating an Android fragment from a user-provided value\n              may allow a malicious application to bypass access controls,  exposing the application to unintended effects.",
            "id" : "java/android/fragment-injection",
            "kind" : "path-problem",
            "name" : "Android fragment injection",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/android/fragment-injection-preference-activity",
          "name" : "java/android/fragment-injection-preference-activity",
          "shortDescription" : {
            "text" : "Android fragment injection in PreferenceActivity"
          },
          "fullDescription" : {
            "text" : "An insecure implementation of the 'isValidFragment' method of the 'PreferenceActivity' class may allow a malicious application to bypass access controls, exposing the application to unintended effects."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-470" ],
            "description" : "An insecure implementation of the 'isValidFragment' method\n              of the 'PreferenceActivity' class may allow a malicious application to bypass access controls,\n              exposing the application to unintended effects.",
            "id" : "java/android/fragment-injection-preference-activity",
            "kind" : "problem",
            "name" : "Android fragment injection in PreferenceActivity",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/unsafe-deserialization",
          "name" : "java/unsafe-deserialization",
          "shortDescription" : {
            "text" : "Deserialization of user-controlled data"
          },
          "fullDescription" : {
            "text" : "Deserializing user-controlled data may allow attackers to execute arbitrary code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-502" ],
            "description" : "Deserializing user-controlled data may allow attackers to\n              execute arbitrary code.",
            "id" : "java/unsafe-deserialization",
            "kind" : "path-problem",
            "name" : "Deserialization of user-controlled data",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/unvalidated-url-redirection",
          "name" : "java/unvalidated-url-redirection",
          "shortDescription" : {
            "text" : "URL redirection from remote source"
          },
          "fullDescription" : {
            "text" : "URL redirection based on unvalidated user-input may cause redirection to malicious web sites."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-601" ],
            "description" : "URL redirection based on unvalidated user-input\n              may cause redirection to malicious web sites.",
            "id" : "java/unvalidated-url-redirection",
            "kind" : "path-problem",
            "name" : "URL redirection from remote source",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "6.1"
          }
        }, {
          "id" : "java/xxe",
          "name" : "java/xxe",
          "shortDescription" : {
            "text" : "Resolving XML external entity in user-controlled data"
          },
          "fullDescription" : {
            "text" : "Parsing user-controlled XML documents and allowing expansion of external entity references may lead to disclosure of confidential data or denial of service."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-611", "external/cwe/cwe-776", "external/cwe/cwe-827" ],
            "description" : "Parsing user-controlled XML documents and allowing expansion of external entity\n references may lead to disclosure of confidential data or denial of service.",
            "id" : "java/xxe",
            "kind" : "path-problem",
            "name" : "Resolving XML external entity in user-controlled data",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.1"
          }
        }, {
          "id" : "java/insecure-cookie",
          "name" : "java/insecure-cookie",
          "shortDescription" : {
            "text" : "Failure to use secure cookies"
          },
          "fullDescription" : {
            "text" : "Insecure cookies may be sent in cleartext, which makes them vulnerable to interception."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-614" ],
            "description" : "Insecure cookies may be sent in cleartext, which makes them vulnerable to\n              interception.",
            "id" : "java/insecure-cookie",
            "kind" : "problem",
            "name" : "Failure to use secure cookies",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "5.0"
          }
        }, {
          "id" : "java/xml/xpath-injection",
          "name" : "java/xml/xpath-injection",
          "shortDescription" : {
            "text" : "XPath injection"
          },
          "fullDescription" : {
            "text" : "Building an XPath expression from user-controlled sources is vulnerable to insertion of malicious code by the user."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-643" ],
            "description" : "Building an XPath expression from user-controlled sources is vulnerable to insertion of\n              malicious code by the user.",
            "id" : "java/xml/xpath-injection",
            "kind" : "path-problem",
            "name" : "XPath injection",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/tainted-numeric-cast",
          "name" : "java/tainted-numeric-cast",
          "shortDescription" : {
            "text" : "User-controlled data in numeric cast"
          },
          "fullDescription" : {
            "text" : "Casting user-controlled numeric data to a narrower type without validation can cause unexpected truncation."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-197", "external/cwe/cwe-681" ],
            "description" : "Casting user-controlled numeric data to a narrower type without validation\n              can cause unexpected truncation.",
            "id" : "java/tainted-numeric-cast",
            "kind" : "path-problem",
            "name" : "User-controlled data in numeric cast",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.0"
          }
        }, {
          "id" : "java/polynomial-redos",
          "name" : "java/polynomial-redos",
          "shortDescription" : {
            "text" : "Polynomial regular expression used on uncontrolled data"
          },
          "fullDescription" : {
            "text" : "A regular expression that can require polynomial time to match may be vulnerable to denial-of-service attacks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-730", "external/cwe/cwe-400" ],
            "description" : "A regular expression that can require polynomial time\n              to match may be vulnerable to denial-of-service attacks.",
            "id" : "java/polynomial-redos",
            "kind" : "path-problem",
            "name" : "Polynomial regular expression used on uncontrolled data",
            "precision" : "high",
            "problem.severity" : "warning",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/redos",
          "name" : "java/redos",
          "shortDescription" : {
            "text" : "Inefficient regular expression"
          },
          "fullDescription" : {
            "text" : "A regular expression that requires exponential time to match certain inputs can be a performance bottleneck, and may be vulnerable to denial-of-service attacks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-730", "external/cwe/cwe-400" ],
            "description" : "A regular expression that requires exponential time to match certain inputs\n              can be a performance bottleneck, and may be vulnerable to denial-of-service\n              attacks.",
            "id" : "java/redos",
            "kind" : "problem",
            "name" : "Inefficient regular expression",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/world-writable-file-read",
          "name" : "java/world-writable-file-read",
          "shortDescription" : {
            "text" : "Reading from a world writable file"
          },
          "fullDescription" : {
            "text" : "Reading from a file which is set as world writable is dangerous because the file may be modified or removed by external actors."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-732" ],
            "description" : "Reading from a file which is set as world writable is dangerous because\n              the file may be modified or removed by external actors.",
            "id" : "java/world-writable-file-read",
            "kind" : "problem",
            "name" : "Reading from a world writable file",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.8"
          }
        }, {
          "id" : "java/tainted-permissions-check",
          "name" : "java/tainted-permissions-check",
          "shortDescription" : {
            "text" : "User-controlled data used in permissions check"
          },
          "fullDescription" : {
            "text" : "Using user-controlled data in a permissions check may result in inappropriate permissions being granted."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-807", "external/cwe/cwe-290" ],
            "description" : "Using user-controlled data in a permissions check may result in inappropriate\n              permissions being granted.",
            "id" : "java/tainted-permissions-check",
            "kind" : "path-problem",
            "name" : "User-controlled data used in permissions check",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.8"
          }
        }, {
          "id" : "java/maven/non-https-url",
          "name" : "java/maven/non-https-url",
          "shortDescription" : {
            "text" : "Failure to use HTTPS or SFTP URL in Maven artifact upload/download"
          },
          "fullDescription" : {
            "text" : "Non-HTTPS connections can be intercepted by third parties."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-300", "external/cwe/cwe-319", "external/cwe/cwe-494", "external/cwe/cwe-829" ],
            "description" : "Non-HTTPS connections can be intercepted by third parties.",
            "id" : "java/maven/non-https-url",
            "kind" : "problem",
            "name" : "Failure to use HTTPS or SFTP URL in Maven artifact upload/download",
            "precision" : "very-high",
            "problem.severity" : "error",
            "security-severity" : "8.1"
          }
        }, {
          "id" : "java/ognl-injection",
          "name" : "java/ognl-injection",
          "shortDescription" : {
            "text" : "OGNL Expression Language statement with user-controlled input"
          },
          "fullDescription" : {
            "text" : "Evaluation of OGNL Expression Language statement with user-controlled input can lead to execution of arbitrary code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-917" ],
            "description" : "Evaluation of OGNL Expression Language statement with user-controlled input can\n                lead to execution of arbitrary code.",
            "id" : "java/ognl-injection",
            "kind" : "path-problem",
            "name" : "OGNL Expression Language statement with user-controlled input",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.8"
          }
        }, {
          "id" : "java/ssrf",
          "name" : "java/ssrf",
          "shortDescription" : {
            "text" : "Server-side request forgery"
          },
          "fullDescription" : {
            "text" : "Making web requests based on unvalidated user-input may cause the server to communicate with malicious servers."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-918" ],
            "description" : "Making web requests based on unvalidated user-input\n              may cause the server to communicate with malicious servers.",
            "id" : "java/ssrf",
            "kind" : "path-problem",
            "name" : "Server-side request forgery",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "9.1"
          }
        }, {
          "id" : "java/android/implicit-pendingintents",
          "name" : "java/android/implicit-pendingintents",
          "shortDescription" : {
            "text" : "Use of implicit PendingIntents"
          },
          "fullDescription" : {
            "text" : "Sending an implicit and mutable 'PendingIntent' to an unspecified third party component may provide an attacker with access to internal components of the application or cause other unintended effects."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-927" ],
            "description" : "Sending an implicit and mutable 'PendingIntent' to an unspecified third party\n              component may provide an attacker with access to internal components of the\n              application or cause other unintended effects.",
            "id" : "java/android/implicit-pendingintents",
            "kind" : "path-problem",
            "name" : "Use of implicit PendingIntents",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "8.2"
          }
        }, {
          "id" : "java/android/intent-redirection",
          "name" : "java/android/intent-redirection",
          "shortDescription" : {
            "text" : "Android Intent redirection"
          },
          "fullDescription" : {
            "text" : "Starting Android components with user-provided Intents can provide access to internal components of the application, increasing the attack surface and potentially causing unintended effects."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-926", "external/cwe/cwe-940" ],
            "description" : "Starting Android components with user-provided Intents\n              can provide access to internal components of the application,\n              increasing the attack surface and potentially causing unintended effects.",
            "id" : "java/android/intent-redirection",
            "kind" : "path-problem",
            "name" : "Android Intent redirection",
            "precision" : "high",
            "problem.severity" : "error",
            "security-severity" : "7.5"
          }
        }, {
          "id" : "java/summary/lines-of-code",
          "name" : "java/summary/lines-of-code",
          "shortDescription" : {
            "text" : "Total lines of code in the database"
          },
          "fullDescription" : {
            "text" : "The total number of lines of code across all files. This is a useful metric of the size of a database. For all files that were seen during the build, this query counts the lines of code, excluding whitespace or comments."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "lines-of-code" ],
            "description" : "The total number of lines of code across all files. This is a useful metric of the size of a database.\n              For all files that were seen during the build, this query counts the lines of code, excluding whitespace\n              or comments.",
            "id" : "java/summary/lines-of-code",
            "kind" : "metric",
            "name" : "Total lines of code in the database"
          }
        }, {
          "id" : "java/telemetry/external-libs",
          "name" : "java/telemetry/external-libs",
          "shortDescription" : {
            "text" : "External libraries"
          },
          "fullDescription" : {
            "text" : "A list of external libraries used in the code"
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "telemetry" ],
            "description" : "A list of external libraries used in the code",
            "id" : "java/telemetry/external-libs",
            "kind" : "metric",
            "name" : "External libraries"
          }
        }, {
          "id" : "java/telemetry/supported-external-api-sinks",
          "name" : "java/telemetry/supported-external-api-sinks",
          "shortDescription" : {
            "text" : "Supported sinks in external libraries"
          },
          "fullDescription" : {
            "text" : "A list of 3rd party APIs detected as sinks. Excludes test and generated code."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "telemetry" ],
            "description" : "A list of 3rd party APIs detected as sinks. Excludes test and generated code.",
            "id" : "java/telemetry/supported-external-api-sinks",
            "kind" : "metric",
            "name" : "Supported sinks in external libraries"
          }
        }, {
          "id" : "java/telemetry/supported-external-api-sources",
          "name" : "java/telemetry/supported-external-api-sources",
          "shortDescription" : {
            "text" : "Supported sources in external libraries"
          },
          "fullDescription" : {
            "text" : "A list of 3rd party APIs detected as sources. Excludes test and generated code."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "telemetry" ],
            "description" : "A list of 3rd party APIs detected as sources. Excludes test and generated code.",
            "id" : "java/telemetry/supported-external-api-sources",
            "kind" : "metric",
            "name" : "Supported sources in external libraries"
          }
        }, {
          "id" : "java/telemetry/supported-external-api-taint",
          "name" : "java/telemetry/supported-external-api-taint",
          "shortDescription" : {
            "text" : "Supported flow steps in external libraries"
          },
          "fullDescription" : {
            "text" : "A list of 3rd party APIs detected as flow steps. Excludes test and generated code."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "telemetry" ],
            "description" : "A list of 3rd party APIs detected as flow steps. Excludes test and generated code.",
            "id" : "java/telemetry/supported-external-api-taint",
            "kind" : "metric",
            "name" : "Supported flow steps in external libraries"
          }
        }, {
          "id" : "java/telemetry/unsupported-external-api",
          "name" : "java/telemetry/unsupported-external-api",
          "shortDescription" : {
            "text" : "Usage of unsupported APIs coming from external libraries"
          },
          "fullDescription" : {
            "text" : "A list of 3rd party APIs used in the codebase. Excludes test and generated code."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "summary", "telemetry" ],
            "description" : "A list of 3rd party APIs used in the codebase. Excludes test and generated code.",
            "id" : "java/telemetry/unsupported-external-api",
            "kind" : "metric",
            "name" : "Usage of unsupported APIs coming from external libraries"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/ruby-consistency-queries",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ruby/ql/consistency-queries/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ruby/ql/consistency-queries/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/swift-all",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/swift/ql/lib/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/swift/ql/lib/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "csharp-solorigate-tests",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/campaigns/Solorigate/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/campaigns/Solorigate/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.2.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/python/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/python/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/javascript-experimental-atm-model-building",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/experimental/adaptivethreatmodeling/modelbuilding/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/experimental/adaptivethreatmodeling/modelbuilding/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/ql-tests",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ql/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ql/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/csharp-solorigate-all",
        "semanticVersion" : "1.2.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/campaigns/Solorigate/lib/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/campaigns/Solorigate/lib/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/python-all",
        "semanticVersion" : "0.5.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/python/ql/lib/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/python/ql/lib/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/ql-consistency-queries",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ql/ql/consistency-queries/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ql/ql/consistency-queries/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/ruby-queries",
        "semanticVersion" : "0.2.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ruby/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ruby/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/java-examples",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/java/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/java/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/ruby-all",
        "semanticVersion" : "0.3.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ruby/ql/lib/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ruby/ql/lib/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/csharp-examples",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/csharp-solorigate-queries",
        "semanticVersion" : "1.2.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/campaigns/Solorigate/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/campaigns/Solorigate/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/go-all",
        "semanticVersion" : "0.2.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/go/ql/lib/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/go/ql/lib/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/python-tests",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/python/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/python/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/javascript-tests",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/javascript-queries",
        "semanticVersion" : "0.2.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-upgrades",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql/legacy-upgrades/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql/legacy-upgrades/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/csharp-queries",
        "semanticVersion" : "0.2.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/java-all",
        "semanticVersion" : "0.3.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/java/ql/lib/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/java/ql/lib/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/python-examples",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/python/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/python/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/go-examples",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/go/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/go/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-java-consistency-queries",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/java/ql/consistency-queries/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/java/ql/consistency-queries/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-libraries-csharp",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/misc/legacy-support/csharp/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/misc/legacy-support/csharp/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/javascript-experimental-atm-lib",
        "semanticVersion" : "0.3.1",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/experimental/adaptivethreatmodeling/lib/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/experimental/adaptivethreatmodeling/lib/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/suite-helpers",
        "semanticVersion" : "0.2.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/misc/suite-helpers/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/misc/suite-helpers/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/cpp-tests-cwe-190-tainted",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/cpp/ql/test/query-tests/Security/CWE/CWE-190/semmle/tainted/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/cpp/ql/test/query-tests/Security/CWE/CWE-190/semmle/tainted/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/csharp-all",
        "semanticVersion" : "0.3.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/lib/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/lib/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/javascript-all",
        "semanticVersion" : "0.2.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/lib/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/lib/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/cpp-all",
        "semanticVersion" : "0.3.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/cpp/ql/lib/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/cpp/ql/lib/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-csharp-tests",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-swift-tests",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/swift/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/swift/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/javascript-experimental-atm-queries",
        "semanticVersion" : "0.3.1",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/experimental/adaptivethreatmodeling/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/experimental/adaptivethreatmodeling/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/cpp-tests",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/cpp/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/cpp/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/cpp-queries",
        "semanticVersion" : "0.2.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/cpp/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/cpp/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/java-tests",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/java/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/java/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/ql",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ql/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ql/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-libraries-cpp",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/misc/legacy-support/cpp/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/misc/legacy-support/cpp/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/go-queries",
        "semanticVersion" : "0.2.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/go/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/go/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-libraries-java",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/misc/legacy-support/java/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/misc/legacy-support/java/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-libraries-javascript",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/misc/legacy-support/javascript/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/misc/legacy-support/javascript/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/java-queries",
        "semanticVersion" : "0.2.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/java/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/java/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/ruby-examples",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ruby/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ruby/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-libraries-python",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/misc/legacy-support/python/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/misc/legacy-support/python/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-csharp-consistency-queries",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/consistency-queries/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/csharp/ql/consistency-queries/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/swift-queries",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/swift/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/swift/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/javascript-examples",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/javascript/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/cpp-examples",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/cpp/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/cpp/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/go-tests",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/go/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/go/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/python-consistency-queries",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/python/ql/consistency-queries/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/python/ql/consistency-queries/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/ql-examples",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ql/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ql/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-libraries-go",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/go/ql/config/legacy-support/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/go/ql/config/legacy-support/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql/ruby-tests",
        "locations" : [ {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ruby/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/Users/AVVWYG744/Downloads/codeql-win64/codeql-codeql-cli-v2.10.0/ruby/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "invocations" : [ {
      "toolExecutionNotifications" : [ {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "server/src/main/java/com/example/Person.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 0
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 2
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          },
          "relatedLocations" : [ ]
        }
      }, {
        "locations" : [ {
          "physicalLocation" : {
            "artifactLocation" : {
              "uri" : "server/src/test/java/com/example/TestPerson.java",
              "uriBaseId" : "%SRCROOT%",
              "index" : 1
            }
          }
        } ],
        "message" : {
          "text" : ""
        },
        "level" : "none",
        "descriptor" : {
          "id" : "java/diagnostics/successfully-extracted-files",
          "index" : 2
        },
        "properties" : {
          "formattedMessage" : {
            "text" : ""
          },
          "relatedLocations" : [ ]
        }
      } ],
      "executionSuccessful" : true
    } ],
    "artifacts" : [ {
      "location" : {
        "uri" : "server/src/main/java/com/example/Person.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "server/src/test/java/com/example/TestPerson.java",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    } ],
    "results" : [ ],
    "automationDetails" : {
      "id" : "java/"
    },
    "columnKind" : "utf16CodeUnits",
    "properties" : {
      "metricResults" : [ {
        "rule" : {
          "id" : "java/summary/lines-of-code",
          "index" : 46
        },
        "ruleId" : "java/summary/lines-of-code",
        "ruleIndex" : 46,
        "value" : 32,
        "baseline" : 32
      }, {
        "rule" : {
          "id" : "java/telemetry/external-libs",
          "index" : 47
        },
        "ruleId" : "java/telemetry/external-libs",
        "ruleIndex" : 47,
        "value" : 3,
        "message" : {
          "text" : "rt.jar"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/supported-external-api-taint",
          "index" : 50
        },
        "ruleId" : "java/telemetry/supported-external-api-taint",
        "ruleIndex" : 50,
        "value" : 1,
        "message" : {
          "text" : "java.lang.String#format(String,Object\\[\\])"
        }
      }, {
        "rule" : {
          "id" : "java/telemetry/unsupported-external-api",
          "index" : 51
        },
        "ruleId" : "java/telemetry/unsupported-external-api",
        "ruleIndex" : 51,
        "value" : 2,
        "message" : {
          "text" : "java.lang.String#length()"
        }
      } ],
      "semmle.formatSpecifier" : "sarif-latest"
    }
  } ]
}